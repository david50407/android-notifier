// Copyright 2011 Rodrigo Damazio
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//       http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
package org.damazio.notifier.protocol;

option optimize_for = LITE_RUNTIME;

message Event {
  // The device that generated this event.
  // If unset then the event was generated by the local device.
  // This field will always be set when the event is being sent between devices.
  optional int64 source_device_id = 1;

  // Zero or more devices that this event is targeted to.
  // If none specified, then it's meant for all devices that receive it.
  repeated int64 target_device_id = 2;

  // When the event happened, in milliseconds since the epoch, UTC.
  required int64 timestamp = 3;

  // The type of event.
  enum Type {
    NOTIFICATION_RING = 1;
    NOTIFICATION_MISSED_CALL = 2;
    NOTIFICATION_VOICEMAIL = 3;
    NOTIFICATION_SMS = 4;
    NOTIFICATION_MMS = 5;
    NOTIFICATION_BATTERY = 6;
    NOTIFICATION_THIRD_PARTY = 7;
    NOTIFICATION_MASK = 15;  // Bits 0-3

    COMMAND_CALL = 16;
    COMMAND_HANGUP = 17;
    COMMAND_SMS = 18;
    COMMAND_THIRD_PARTY = 19;
    COMMAND_MASK = 240;  // Bits 4-7
  }
  required Type type = 4;

  // Payload is the type-dependent encoded protocol buffer payload.
  // A missing payload happens if no details were available about the event.
  optional bytes payload = 5;
}

// General descriptor for a phone number.
message PhoneNumber {
  optional string number = 1;
  optional string number_type = 2;
  optional string name = 3;
  optional bytes picture = 4;
}
